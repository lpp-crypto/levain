#+TITLE: Meuporg: Keeping track of research projects
#+Time-stamp: <2025-04-16 16:15:32>

* Goal
** /The Problem/®
With time, multiple research project accumulate and end up happening
at the same time, and even more have been finished. At the same time,
the corresponding notes/piece of code/latex, etc. need to be safely
archived. This makes it hard to keep track of the state of each of
them:
- what was done? Why?
- What is left to do?
- What worked? What didn't?
Synchronizing this information over several computers (say, a work
desktop and a personal laptop) adds yet another layer of complexity.

At the same time, projects involve multiple people, and some subsets
are likely to shared using some VCS. As a consequence:
1. the method used to document projects should not rely on said VCS
   for synchronisation (my notes are for me only, thank you very
   much);
2. public information (say about the structure of the project or about
   what's left to do in shared files) should be contained within the
   plain text files themselves, and be readable;
3. the setup of a new project, its navigation, and its documentation
   should be simplified/automated as much as possible.
** The solution: meuporg
1. Interpret the whole project as a tree where each node is documented
   using plain text,
2. Automate the generation of this description in a way that ease the
   extraction of relevant data (TODO, etc),
3. Exploit the information made available in this way to ease work:
   efficient navigation, simple(r) compilation, search content in
   project, etc.
* The meuporg approach
** A project structure
- The Big Tree®
- The meup.org file
- meuporg tags
- Describing the project: mapping script
** Automated mapping
- python script
* Meuporg Parser

#+BEGIN: meuporg :path "~/research/sbox-utils/" :ignore "fftw Cmake known_functions build"
* /home/leo/research/sbox-utils/
** /home/leo/research/sbox-utils/sboxU/
*** analysis.py [[file:/home/leo/research/sbox-utils/sboxU/analysis.py][(→)]]
**** Structural anomalies [[file:/home/leo/research/sbox-utils/sboxU/analysis.py::162][(→)]]
- TODO :: [[file:/home/leo/research/sbox-utils/sboxU/analysis.py::226][(→)]] evaluate the anomaly of all cycle types
**** Automated analysis [[file:/home/leo/research/sbox-utils/sboxU/analysis.py::320][(→)]]
***** Main class [[file:/home/leo/research/sbox-utils/sboxU/analysis.py::355][(→)]]
- CONTINUE :: [[file:/home/leo/research/sbox-utils/sboxU/analysis.py::452][(→)]] Finish automated TU analysis
- TODO :: [[file:/home/leo/research/sbox-utils/sboxU/analysis.py::461][(→)]] advanced analysis


#+END

* Emacs integration
** org-mode
- meup.org as agenda files
** TOSTART mini-map
:Logbook:
- State "TOSTART"    from              [2025-04-13 dim. 20:38]
:END:
Use the python parser to generate the mini-map
** map block
Now that parser runs, we need a convenient way to put its output inside an org file. This is achieved using [[https://orgmode.org/manual/Dynamic-Blocks.html][dynamic blocks]]. These replace their content with the output of an elisp function that needs to have names of a specific form: =org-dblock-write:<some name>=. Here, we let =<some name>= be =meuporg=, for when we want a sparse tree, and =meuporg-full-tree= for when we don't. The syntax of these blocks allows the passing of arguments: =:path= will correspond to the path to the folder under investigation, and =:ignore= to a list strings/regexps. Any file whose full path matches at least one of these regexps will be ignored.

Then it is simply a matter of building the shell command using these arguments, and assuming that the =meuporg= parser is somewhere in your =$PATH=. This is done by adding the following =elisp= functions.

#+BEGIN_SRC elisp
(defun org-dblock-write:meuporg(params)
  (let ((to-ignore (plist-get params :ignore))
        (path (plist-get params :path)))
    (insert (shell-command-to-string (concat "meuporg " path " -i " to-ignore)))
))

(defun org-dblock-write:meuporg-full-tree(params)
  (let ((to-ignore (plist-get params :ignore))
        (path (plist-get params :path)))
    (insert (shell-command-to-string (concat "meuporg " path " -a -i " to-ignore)))
))
#+END_SRC

The syntax of a block intended to contain the =meuporg= tree of this whole project would then be as follows.

#+BEGIN_SRC org
,#+BEGIN: meuporg :path "~/levain/" :ignore "*.pyc"
,#+END
#+END_SRC


** Telling emacs about the structure
- projectile integration
- efficient project navigation
- the .dir-local.el files
- meuporg-mode

#+BEGIN_SRC elisp

(defun pi2-6-outline-level ()
  (- (match-end 0) (match-beginning 0)))

(defun pi2-6-outline-minor-mode()
  (interactive)
  (when (not (string= major-mode "org-mode"))
    (progn
      (setq-local outline-regexp ".*!\\(SUB\\)*SECTION!")
      (setq-local outline-heading-end-regexp "\n")
      (setq-local outline-level #'pi2-6-outline-level)
      (outline-minor-mode)
  )))
#+END_SRC

** elisp
*** The meuporg-list minor mode
**** Setting up the global variables

#+BEGIN_SRC emacs-lisp :tangle yes :comments link
(defvar meuporg/font-faces
  "Defines how the different items should be displayed in the
  list of items.")
(setq meuporg/font-faces
      '(
        ; structural items
        ("line-index" . '(:slant italic :height 0.8))
        ("LEV1" . '(:height 1.1 :slant italic  :foreground "#5C5C5C"))
        ("SECTION" . '(:height 1.1 :slant italic  :foreground "#5C5C5C"))
        ("SUBSECTION" . '(:slant italic  :foreground "#9C9C9C"))
        ("LEV2" . '(:slant italic  :foreground "#9C9C9C"))
        ("SUBSUBSECTION" . '(:height 0.9 :slant italic  :foreground "#9C9C9C"))
        ("LEV3" . '(:height 0.9 :slant italic  :foreground "#9C9C9C"))
        ; action items
        ("CONTINUE" . (:weight bold :foreground "#880066"))
        ("TODO" . '(:foreground "#C00000"))
        ("FIXME" . '(:foreground "#E08040"))
        ("IMPROVE" . '(:foreground "#119922"))
        ("CHECK" . '(:foreground "#004488"))
        ; mode specific items
        ("FIXREF" . '(:foreground "#AA9900"))))

(defvar meuporg/indentation
  "Used by meuporg-list-mode to indent the items according to the
  section they are in.")
(setq meuporg/indentation "")

(defvar meuporg/item-list-buffer-name
  "Used by meuporg-list-mode to indent the items according to the
  section they are in.")
(setq meuporg/item-list-buffer-name "*Items list*")
#+END_SRC

**** Generating the list of items
#+BEGIN_SRC emacs-lisp :tangle yes
(defun meuporg/list-items ()
  "Returns a list containing all items in the current buffer.

Note that LaTeX style section (e.g. \section{bla bla}) are
considered like items with name '(SUB)*SECTION' and with the
content of {} as their description."
  (interactive)
  (save-excursion
    (setq result (list))
    (goto-char 1)
    (setq std-f-item-regex "\\(![A-Za-z0-9]+!\\)")
    (setq latex-f-item-regex "\\(^\\\\.*section{.*}$\\)")
    (setq std-p-item-regex "!\\([A-Za-z0-9]+\\)!\\(.*\\)$")
    (setq latex-p-item-regex "\\\\\\(.*section\\){\\(.*\\)}$")
    (setq item-regex (concat std-f-item-regex "\\|" latex-f-item-regex))
    (while (search-forward-regexp item-regex nil t)
      (if (match-string-no-properties 1)
          (setq parsing-regex std-p-item-regex)
        (setq parsing-regex latex-p-item-regex))
      (beginning-of-line)
      (search-forward-regexp parsing-regex)
      (setq result (cons (list
                          (line-number-at-pos)
                          (match-string-no-properties 1)
                          (match-string-no-properties 2))
                         result))))
  (reverse result))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(defun meuporg/short-name(name)
  "Returns a shortened version of a given item name."
  (setq result "")
  ; sections
  (if (or (string= "SECTION" name) (string= "LEV1" name))
      (setq result ""))
  (if (or (string= "SUBSECTION" name) (string= "LEV2" name))
      (setq result ""))
  (if (or (string= "SUBSUBSECTION" name) (string= "LEV3" name))
      (setq result "•"))
  (if (string= "TODO" name)
      (setq result "T"))
  (if (string= "FIXME" name)
      (setq result "F"))
  (if (string= "FIXREF" name)
      (setq result "FR"))
  (if (string= "CONTINUE" name)
      (setq result "C"))
  (if (string= "CHECK" name)
      (setq result "CK"))
  (if (string= "IMPROVE" name)
      (setq result "I"))
  result)



(defun meuporg/print-list-item(item)
  "Inserts at point the line of the item, its name and its
description using the correct faces from meuporg/font-faces"
  (let (line-index name description face)
    (setq line-index (nth 0 item))
    (setq name (upcase (nth 1 item)))
    (setq description (nth 2 item))
    (setq face (assoc name meuporg/font-faces))
    (if (or (string= "SECTION" name) (string= "LEV1" name))
        (setq meuporg/indentation ""))
    (if (or (string= "SUBSECTION" name) (string="LEV2" name))
        (setq meuporg/indentation " "))
    (if (or (string= "SUBSUBSECTION" name) (string="LEV3" name))
        (setq meuporg/indentation "  "))
    (insert (format "%s!%s%s%s\n"
                    (propertize (format "%4d" line-index) 'face '(:height 0.6))
                    meuporg/indentation
                    (propertize (meuporg/short-name name) 'face (cdr (assoc name meuporg/font-faces)))
                    (propertize description 'face (cdr (assoc name meuporg/font-faces)))))
    (if (or (string= "SECTION" name) (string= "LEV1" name))
        (setq meuporg/indentation "  "))
    (if (or (string= "SUBSECTION" name) (string="LEV2" name))
        (setq meuporg/indentation "    "))
    (if (or (string= "SUBSUBSECTION" name) (string="LEV3" name))
        (setq meuporg/indentation "      "))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(defun meuporg/show-items ()
  "Creates a new window containing an ordered list of the items
in this file and switches cursor to it."
  (interactive)
  (let (local-item-list)
    (kill-buffer "*Item list*")
    (setq local-item-list (meuporg/list-items))
    ;(delete-other-windows)
    (setq meuporg/base-buffer (current-buffer))
    (setq current-window (selected-window))
    (split-window-horizontally 23)
    (switch-to-buffer "*Item list*")
    ;(pop-to-buffer "*Item list*")
    ;(switch-to-buffer "*Item list*")
    (erase-buffer)
    (mapc 'meuporg/print-list-item local-item-list)
    (meuporg-item-list-mode)
    (goto-char 1)))
#+END_SRC
*** Having a link to LaTeX toc:s
The aim here is to allow us to quickly get to a specific spot in a
LaTeX project from a =meup.org= file. To this end, we want to easily
jump to its table-of-content, and from there to jump to the
relevant part of the LaTeX code.

It is possible to uses directly reftex's ability to generate a
document table-of-content by parsing the LaTeX files by creating a
simple function that opens a LaTeX file, and then calls =reftex-toc=
from it. Here it is.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun meuporg/get-latex-toc (filePath)
  (setq cb (current-buffer))
  (let ((tmp (find-file filePath)))
    (save-excursion
      (reftex-toc)
      (kill-buffer tmp)
      ))
  (switch-to-buffer cb))  
#+END_SRC

It can then be used inside org-mode links: a special type of can
process any elisp, and give the file linked to as an argument to the
function called. The syntax of the first block is =[elisp:(function
arg)]=.

It can be used for instance as follows:

(meuporg/get-latex-toc "~/research/tip5/shared/preliminaries.tex")
**** Interacting with the list of items
#+BEGIN_SRC emacs-lisp :tangle yes
(defun meuporg/show-item-in-file()
  "Displays the item the cursor is on in an item list."
  (interactive)
  (beginning-of-line)
  (search-forward-regexp "\\([0-9]+\\)!")
  (beginning-of-line)
  (setq line-index (string-to-number (match-string-no-properties 1)))
  (other-window 1 nil)
  (delete-window)
  (switch-to-buffer meuporg/base-buffer)
  (goto-char (point-min))
  (forward-line (- line-index 1))
  (recenter))

(defun meuporg/display-item-in-file()
  "In an item list, moves the cursor in the other file to the
line containing the item. Stays in the item list."
  (interactive)
  (meuporg/show-item-in-file)
  (other-window 1 nil))

(defun meuporg/go-to-item-in-file()
  "Kills the buffer and the window containing the item list after
moving to the location of the item."
  (interactive)
  (meuporg/display-item-in-file))

(defun meuporg/list-next-section()
  "Searches for the next section."
  (interactive)
  (search-forward " SECTION "))

(defun meuporg/list-previous-section()
  "Searches for the previous section."
  (interactive)
  (search-backward " SECTION "))
#+END_SRC

**** The minor-mode used in the Items list

#+BEGIN_SRC emacs-lisp :tangle yes
(define-minor-mode meuporg-item-list-mode
    "Toggle meuporg-item-list mode.

  Interactively with no argument, this command toggles the mode.
  A positive prefix argument enables the mode, any other prefix
  argument disables it.  From Lisp, argument omitted or nil enables
  the mode, `toggle' toggles the state. "
   ;; The initial value.
   :init-value nil
   ;; The indicator for the mode line.
   :lighter " !List!"
   :keymap
   `(
     (,(kbd "<right>")   . meuporg/display-item-in-file)
     (,(kbd "<RET>")   . meuporg/show-item-in-file)
     (, "q"   . kill-buffer-and-window)
     (, "n"   . meuporg/list-next-section)
     (, "p"   . meuporg/list-previous-section)))

(add-hook 'meuporg-item-list-mode-hook
          (lambda()
            (read-only-mode)
            (hl-line-mode)
            (toggle-truncate-lines 1)
	    (display-line-numbers-mode -1)))
#+END_SRC

